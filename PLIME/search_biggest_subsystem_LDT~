/****************************************************************************/
/**                                                                        **/
/** This function implements the thermal relaxation algorithm              **/
/** which is applied to equation systems. The goal is to detect the        **/
/** dominant subsystem having one particular solution.                     **/
/**                                                                        **/
/****************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <iostream.h>

#include "leon.h"
#include "math_functions.h"
#include "struct.h"
#include "memory_alloc.h"
#include "data_output.h"
#include "update_equations.h"

#include "line_detect_tk.h"

#include "inline_functions.cc"

/* temp */
#include "utils.h"

/******************************************************************************/
/* Line detection	       						      */
/******************************************************************************/
void search_biggest_subsystem_LDT(struct_ldetect *LDT,
				  struct_algo_param *P_ALGO,
				  struct_algo *ALGO){

    float dist; /* distance between current point and eq hyperplane */
    int i,j,k,iteration;
    int coord_x, coord_y;
    float t0,ti=0; /* Initial, decrease and current temp */
    float avg;
    int non_choisies = 0;
    static float x[3]; /* Vectors of current subsystem solution */
    int *ligne;

    /* the following variables are defined to simplify expressions */
    float **A = LDT->SYST->A;
    int nc = LDT->SYST->nc;
    int *eq = ALGO->equations;
    /* ****** */

    ALGO->last_subsys_threshold = 0; /* not implemented with lines */

    /* temp monitoring */
    FILE *mon_t_file;
    if (P_ALGO->mon_t) {
      if ((mon_t_file = fopen("MONITOR/mon_t.txt","a"))==NULL)
	exit_with_error("Can't create 'mon_t.txt'");
//      fprintf(mon_t_file,"\n#%d\n",ALGO->step+1);
    }
    /* solution monitoring in reciprocal space (-mon_ab option)*/
    FILE *mon_ab;
    if (P_ALGO->mon_ab) {
      char mon_ab_name[100];
      sprintf(mon_ab_name,"MONITOR/mon_ab_%d",ALGO->step+1);
      mon_ab = fopen(mon_ab_name,"w");
    }

    ti = P_ALGO->T;

    /* initialisation of solutions for line detection */
    if (ALGO->retry_flag == 0) {
      x[0]=x[1]=0.1;
      x[2]=1;
    }
    else
//       if (LDT->nb_retry[ALGO->step] % (P_ALGO->retry_with_last+1) == 0) {
// 	float aux;
// 	x[0] = sin((float)rand() / 32767 * 2 * 3.1415927);
// 	x[1] = sqrt(1 - x[0]*x[0]);
// 	aux = (float)rand() / 32767 * norm_euclid(LDT->dim.x, LDT->dim.y);
// 	x[0] /= aux;
// 	x[1] /= aux;
// 	printf("Retry randomly #%d with x: %f %f %f\n",
// 	       LDT->nb_retry[ALGO->step],x[0],x[1],x[2]);
//        }
//       else
// 	printf("Retry #%d with x: %f %f %f\n",
// 	       LDT->nb_retry[ALGO->step],x[0],x[1],x[2]);
      {
	if (LDT->nb_retry[ALGO->step]==1)
	  printf("Retry #%3d", LDT->nb_retry[ALGO->step]);
	else
	  printf("\b\b\b%3d", LDT->nb_retry[ALGO->step]);
	fflush(stdout);
	x[0]=x[1]=0.1;
	x[2]=1;
      }

    ALGO->step++;

    /* place origin randomly (-rnd_origin) */
    if (LDT->rnd_origin) {
      point_2d_int old_origin = LDT->origin;
      point_2d_int delta, o_cl;

      if (LDT->cluster) {
	int cc = LDT->current_cluster;
	delta.x = LDT->cluster_edge[cc][1] - LDT->cluster_edge[cc][0];
	delta.y = LDT->cluster_edge[cc][3] - LDT->cluster_edge[cc][2];
	o_cl.x = LDT->dim.x/2 - LDT->cluster_edge[cc][0];
	o_cl.y = LDT->dim.y/2 - LDT->cluster_edge[cc][2];
      }
      else {
	delta.x = LDT->dim.x;
	delta.y = LDT->dim.y;
	o_cl.x = LDT->dim.x / 2;
	o_cl.y = LDT->dim.y / 2;
      }
      LDT->origin.x = (int)floor((float)rand()/32767 * delta.x - o_cl.x);
      LDT->origin.y = (int)floor((float)rand()/32767 * delta.y - o_cl.y);
      for (int q=0; q<ALGO->nb_couples; q++) {
	A[eq[q]][0] += LDT->origin.x - old_origin.x;
	A[eq[q]][1] += LDT->origin.y - old_origin.y;
      }
    }

    /* In the beginning every index points to the equation itself */
    ligne= (int *) vector_alloc(ALGO->nb_couples, sizeof(int));
    for (i = 0; i < ALGO->nb_couples; i++) ligne[i] = i;

    /* set initial temp if auto_temp_set is enable */
    if (P_ALGO->auto_temp_set) {
      calculate_v(&avg, x, LDT->SYST, ALGO);
      t0 = P_ALGO->tzero * avg / norm_euclid(x[0], x[1]);
//      printf("Initial temperature: %f\n",t0);
    }

    /* Here begins the outer loop, counting the number of cycles, i.e. the    */
    /* number of times, all equations of the equation system have been chosen */
    /* to adapt the solution.                                                 */
//    ALGO->nb_cycles = P_ALGO->nb0_cycles * ALGO->nb0_couples / ALGO->nb_couples;
    ALGO->nb_cycles = P_ALGO->nb0_cycles;
    for (ALGO->index_cycle = 0;
	 ALGO->index_cycle < ALGO->nb_cycles;
	 ALGO->index_cycle++) {

      /* calculate current temperature */
      calculate_v(&avg, x, LDT->SYST, ALGO);
      avg /= norm_euclid(x[0], x[1]);
      ti = update_temp(&t0, ti, avg, P_ALGO, ALGO);
      /* temp monitoring */
      if (P_ALGO->mon_t) fprintf(mon_t_file,"%g %g\n",avg,ti);

      /* stop algorithm if avg/ti is upper than stop_temp */
      if (avg/ti > P_ALGO->stop_temp){
	ALGO->last_subsystem_nb_cycles = ALGO->index_cycle;
	ALGO->index_cycle = ALGO->nb_cycles;
      }

      /* enable conditionned correction if avg/ti is upper than no_corr */
      if (avg/ti > P_ALGO->no_corrections) P_ALGO->no_corrections = 0;

/************************************************************************/
/* Here begins the inner loop, each couple of equations of the equation */
/* system is chosen in random order.                                    */
    
      for (iteration = 0; iteration < (int)(ALGO->nb_couples*P_ALGO->partial)
							; iteration++){

	/* choose one couple of equations */
	i = choose_line(ligne, &non_choisies, ALGO->nb_couples);
	i = eq[i]; /* indirect access to equations */
 	/* calculate distance between current point and equation hyperplane */
	if ((A[i][0]!=0) || (A[i][1]!=0)) {
	  float prod_scal = qprod_scal(A[i],x,nc);
	  dist = prod_scal / (norm_euclid(x[0], x[1]));
	  /* calculate weights */
	  ALGO->weight[1] = ALGO->weight[0] = ABS(prod_scal) 
	    / sq_norm_euclid(A[i][0], A[i][1]);
	}
	else ALGO->weight[1] = ALGO->weight[0] = 0;
	ALGO->weight[2] = 0; /* no correction for c */
	/* apply correction to current solutions */
	if (ABS(dist/ti) < P_ALGO->stop_temp)
	  if (P_ALGO->no_corrections == 0)
	    update_current_solution
	      (x, t0, ti, 2, dist, LDT->SYST, P_ALGO, ALGO, i);
	  else
	    if (ABS(dist) > P_ALGO->epsilon)
	      update_current_solution
		(x, t0, ti, 2,dist, LDT->SYST, P_ALGO, ALGO, i);

	/* solution monitoring */
	if (P_ALGO->mon_ab) fprintf(mon_ab,"%8.3e %8.3e %3.1f\n",x[0],x[1],ti);

	/* update canvas if -graph enable */
	if (P_ALGO->graph && P_ALGO->mon==-1)
	  if (iteration%MONITORING_STEP==0) {
	    printf("\b\b\b\b\b\b\b\b\b\b\b\b\b\b");
	    printf("%5d ti=%5.1f",ALGO->index_cycle,ti);
	    fflush(stdout);
	    line_detect_tk_update_mon_canvas(LDT, x);
	  }

      }

/* End of inner loop							*/
/************************************************************************/

    }

    /* add current solution to the matrix of solutions */
    for (i=0; i < nc; i++)
      LDT->solutions[ALGO->step-1][i] = x[i];

    /* update the equation list eq[] */
    ALGO->last_subsys_size = 0;
    float norm = norm_euclid(x[0], x[1]);
    for (i = 0; i < ALGO->nb_couples; i++) {
      if (ABS(qprod_scal(x, A[eq[i]], nc) / norm) < P_ALGO->epsilon)
	ALGO->last_subsys_size++;
    }
    if (ALGO->last_subsys_size >= P_ALGO->stop_cycles)
      line_detect_update_eq(P_ALGO, ALGO, LDT, P_ALGO->epsilon);


    /* rescale a & b with new origin */
    if (LDT->rnd_origin) {
      float aux = 1 + x[0]*LDT->origin.x + x[1]*LDT->origin.y;
      LDT->solutions[ALGO->step-1][0] /= aux;
      LDT->solutions[ALGO->step-1][1] /= aux;
    }

    free(ligne);

    /* close monitoring files */
    if (P_ALGO->mon_t) fclose(mon_t_file);
    if (P_ALGO->mon_ab) fclose(mon_ab);
}
